mutate(seqs = str_remove_all(seqs, "-")) %>%
df_to_DNAStringset() %>%
AlignSeqs() %>%
mismatchTable()
query_df <- no_match_df %>%
filter(from == DIV_no_match_list[1])
query <- c(DIV_no_match_list[1], as.character(query_df$to))
count_df_i <- all_seqs %>%
filter(names %in% query) %>%
mutate(names = as.character(names), seqs = as.character(seqs)) %>%
arrange(desc(names)) %>%
df_to_DNAStringset() %>%
pairwiseAlignment()
test <- count_df %>%
select(names, seqs) %>%
mutate(seqs = str_remove_all(seqs, "-")) %>%
df_to_DNAStringset() %>%
AlignSeqs()
test_AS <- PairwiseAlignments(test)
test
test_AS <- aligned(test)
AlignedXStringSet
test_AS <- Biostrings::AlignedXStringSet(test)
test_AS <- Biostrings::alignedPattern(test)
test_AS <- Biostrings::make_XString_from_string(test)
test <- count_df %>%
select(names, seqs) %>%
mutate(seqs = str_remove_all(seqs, "-")) %>%
df_to_DNAStringset() %>%
AlignSeqs() %>%
DNAMultipleAlignment()
test_AS <- maskMotif(test)
test_AS <- mismatchTable(test)
test_AS <- aligned(test)
mismatchTable
paste(test)
test_AS <- consensus(test)
test_AS <- rowmask(test)
paste(test_AS)
test_AS <- consensusMatrix(test)
test_AS
test <- count_df %>%
select(names, seqs) %>%
mutate(seqs = str_remove_all(seqs, "-")) %>%
df_to_DNAStringset() %>%
AlignSeqs() %>%
DNAStringSet_to_df()
View(test)
test_AS <- AlignedXStringSet(test)
test <- count_df %>%
select(names, seqs) %>%
mutate(seqs = str_remove_all(seqs, "-")) %>%
df_to_DNAStringset() %>%
AlignSeqs() %>%
readDNAMultipleAlignment()
query_df <- no_match_df %>%
filter(from == DIV_no_match_list[1])
query <- c(DIV_no_match_list[1], as.character(query_df$to))
count_df_i <- all_seqs %>%
filter(names %in% query) %>%
mutate(names = as.character(names), seqs = as.character(seqs)) %>%
arrange(desc(names)) %>%
df_to_DNAStringset() %>%
AlignSeqs()
test <- count_df_i %>%
readDNAMultipleAlignment()
count_df_i %>%
writeXStringSet("test.fasta")
test <- readDNAMultipleAlignment("test.fasta")
test_mm <- mismatchTable(test)
test
aligned(test)
test <- read_alignment("test.fasta")
plot_alignment(test)
plot_alignment(test, palette = "DNA")
plot_alignment(test, palette = "DNA")
no_match_list
DIV_no_match_list <- as.character(unique(no_match_df$from))
DIV_no_match_list
query_df <- no_match_df %>%
filter(from == DIV_no_match_list[27])
query <- c(DIV_no_match_list[27], as.character(query_df$to))
count_df_i <- all_seqs %>%
filter(names %in% query) %>%
mutate(names = as.character(names), seqs = as.character(seqs)) %>%
arrange(desc(names)) %>%
df_to_DNAStringset() %>%
AlignSeqs()
count_df_i %>%
writeXStringSet("test.fasta")
test <- read_alignment("test.fasta")
plot_alignment(test, palette = "DNA")
# Libraries for plotting and being tidy
library(broom)
library(purrr)
library(lubridate)
library(dplyr)
library(ggplot2)
library(ggpubr)
library(tidyr)
library(readr)
theme_set(theme_bw())
# Libraries for fitting curves
library(nls.multstart)
library(nlstools)
# Libraries for statistics
library(rstatix)
PAM_RLC <- read_csv("PAM_R_Matt_RLC_MASTER.csv") %>%
filter(site != "13-124") %>% # REMOVE THIS ONCE PAR VALUES ARE FIXED
group_by(sampleID, replicate) %>%
mutate(PAMID = group_indices()) %>%
filter(PAMID != 110) %>% # THIS ONE HAS ONLY TWO VALUES (DAV_AH_B73_2)
filter(PAMID != 317) %>% # THIS ONE HAS MISSING VALUES TOO (SB1_AT_31)
mutate(time_date = dmy(time_date),
Fm = ifelse(Fm <= F, F+1, Fm), # There should not be any Fm values < F
PAR = ifelse(PAR == 0, 0.001, PAR), # PAR values = 0 may result in infinite values during fitting
FqFm = (Fm - F)/Fm, # Quantum yield of PSII
rETR = FqFm * PAR, # Relative electron transport rate
Fo.p = first(F) / (first(FqFm) + (first(F)/Fm)), # Fo'
onemC = (Fm - F)/(Fm - Fo.p), # [1 - C]
Fv.p = Fm - Fo.p, # Fv'
onemQ = (Fv.p/Fm)/first(FqFm)) %>% # [1 - Q]
ungroup() %>%
mutate(genus_species = paste0(substr(genus, start = 1, stop = 1), "_", species)) # Create a Genus_species column
PAM_FqFM <- read_csv("PAM_R_Matt_13123_Aten_Size.csv") %>%
mutate(time_date = dmy(time_date),
genus_species = paste0(substr(genus, start = 1, stop = 1), "_", species),
tank = as.factor(tank),
colonyID = as.factor(colonyID),
replicate = as.factor(replicate),
Fm = ifelse(Fm <= F, F+1, Fm), # There should not be any Fm values < F
FvFm = (Fm - F)/Fm) # Quantum yield of PSII
# Define the Hennige et al 2008 equation
Hennige <- function(FqFmmax, Ek, x) {
model <- ((FqFmmax*Ek)*(1-exp(-x/Ek)))/x
return(model)
}
rm(list=ls())
# Libraries for plotting and being tidy
library(broom)
library(purrr)
library(lubridate)
library(dplyr)
library(ggplot2)
library(ggpubr)
library(tidyr)
library(readr)
theme_set(theme_bw())
# Libraries for fitting curves
library(nls.multstart)
library(nlstools)
# Libraries for statistics
library(rstatix)
PAM_RLC <- read_csv("PAM_R_Matt_RLC_MASTER.csv") %>%
filter(site != "13-124") %>% # REMOVE THIS ONCE PAR VALUES ARE FIXED
group_by(sampleID, replicate) %>%
mutate(PAMID = group_indices()) %>%
filter(PAMID != 110) %>% # THIS ONE HAS ONLY TWO VALUES (DAV_AH_B73_2)
filter(PAMID != 317) %>% # THIS ONE HAS MISSING VALUES TOO (SB1_AT_31)
mutate(time_date = dmy(time_date),
Fm = ifelse(Fm <= F, F+1, Fm), # There should not be any Fm values < F
PAR = ifelse(PAR == 0, 0.001, PAR), # PAR values = 0 may result in infinite values during fitting
FqFm = (Fm - F)/Fm, # Quantum yield of PSII
rETR = FqFm * PAR, # Relative electron transport rate
Fo.p = first(F) / (first(FqFm) + (first(F)/Fm)), # Fo'
onemC = (Fm - F)/(Fm - Fo.p), # [1 - C]
Fv.p = Fm - Fo.p, # Fv'
onemQ = (Fv.p/Fm)/first(FqFm)) %>% # [1 - Q]
ungroup() %>%
mutate(genus_species = paste0(substr(genus, start = 1, stop = 1), "_", species)) # Create a Genus_species column
PAM_FqFM <- read_csv("PAM_R_Matt_13123_Aten_Size.csv") %>%
mutate(time_date = dmy(time_date),
genus_species = paste0(substr(genus, start = 1, stop = 1), "_", species),
tank = as.factor(tank),
colonyID = as.factor(colonyID),
replicate = as.factor(replicate),
Fm = ifelse(Fm <= F, F+1, Fm), # There should not be any Fm values < F
FvFm = (Fm - F)/Fm) # Quantum yield of PSII
# Define the Hennige et al 2008 equation
Hennige <- function(FqFmmax, Ek, x) {
model <- ((FqFmmax*Ek)*(1-exp(-x/Ek)))/x
return(model)
}
FqFmfits <- PAM_RLC %>%
group_by(PAMID, sampleID, replicate, treatment, genus, species, genus_species, site) %>%
nest() %>%
mutate(fit = purrr::map(data, ~ nls_multstart(FqFm ~ Hennige(FqFmmax, Ek, x = PAR),
data = .x,
iter = 250,
start_lower = c(FqFmmax = 0.2, Ek = 5),
start_upper = c(FqFmmax = 0.85, Ek = 1000),
supp_errors = 'Y',
convergence_count = 100,
na.action = na.omit,
lower = c(FqFmmax = 0.1, Ek = 5)))) %>%
ungroup()
# Fitting info
info <- FqFmfits %>%
mutate(summary = map(fit, glance)) %>%
unnest(summary)
# RESULTS
info %>%
select(PAMID, sampleID, replicate, treatment, genus, species, genus_species, site, sigma:df.residual) %>%
arrange(sampleID, replicate) %>%
write_csv("RESULTS_FqFm_model_fit_quality.csv")
# Parameters
params <- FqFmfits %>%
mutate(., p = map(fit, tidy)) %>%
unnest(p)
# Confidence intervals
CI <- FqFmfits %>%
mutate(., cis = map(fit, confint2),
cis = map(cis, data.frame)) %>%
unnest(cis) %>%
rename(., conf.low = X2.5.., conf.high = X97.5..) %>%
group_by(., PAMID) %>%
mutate(., term = c('FqFmmax', 'Ek')) %>%
ungroup() %>%
select(., -data, -fit)
# Join parameters and confidence intervals
params_CIs <- left_join(params, CI)
# RESULTS
params_CIs %>%
ungroup() %>%
select(PAMID, sampleID, replicate, treatment, genus, species, genus_species, site,  term:conf.high) %>%
arrange(sampleID, replicate) %>%
write_csv("RESULTS_FqFm_model_parameter_estimates.csv")
# Create long PAR list
new_preds <- PAM_RLC %>%
do(., data.frame(PAR = seq(min(.$PAR), max(.$PAR), length.out = 1000), stringsAsFactors = FALSE))
# Augment predictions from fits
predictions <- FqFmfits %>%
mutate(., p = map(fit, augment, newdata = new_preds)) %>%
unnest(p) %>%
rename(., FqFm = .fitted) %>%
group_by(PAMID) %>%
mutate(prediction_id = group_indices())
# Visualise all fits with Ek
ggplot() +
geom_vline(aes(xintercept = estimate), params_CIs %>% filter(term == "Ek")) +
geom_rect(aes(xmin = conf.low, xmax = conf.high, ymin = 0, ymax = Inf), fill = "red", alpha = 0.5, params_CIs %>% filter(term == "Ek")) +
geom_line(aes(PAR, FqFm, group = prediction_id), col = "black", alpha = 0.5, predictions) +
geom_point(aes(PAR, FqFm, fill = genus_species), size = 2, shape = 21, alpha = 0.8, PAM_RLC) +
facet_wrap(~site*genus_species, ncol = 10) +
#scale_x_continuous(trans = 'log10') +
scale_y_continuous(expand = c(0, 0)) +
theme(legend.position = "right", aspect.ratio = 1) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
guides(fill = guide_legend(override.aes = list(size = 3, shape = c(21)))) +
ggtitle("Fq/Fm versus PAR with model fit ((FqFmmax*Ek)*(1-exp(-x/Ek)))/x") +
labs(x = expression(paste("PAR (", mu,"mol photons m"^-2*" s"^-1*")")),
y = 'Fq/Fm (dimensionless)')
params_CIs %>%
filter(term == "Ek") %>%
ggplot(aes(genus_species, y = estimate)) +
geom_boxplot(aes(fill = genus_species)) +
facet_wrap(~site, nrow = 1) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1), aspect.ratio = 1) +
ylab("Ek (minimum saturating irradiance)") +
xlab("Samples")
PAM_RLC %>%
group_by(genus_species, site, PAR) %>%
summarise(onemQ = mean(onemQ),
onemC = mean(onemC)) %>%
ggplot(aes(onemQ, onemC, group = genus_species)) +
geom_path() +
geom_point(aes(fill = PAR, shape = genus_species), size = 3) +
geom_abline(slope = 1) +
facet_wrap(~site, nrow = 1) +
scale_fill_viridis_c(option = "magma") +
scale_shape_manual(values = c(21, 22, 23, 24, 25, 26)) +
theme(aspect.ratio = 1, legend.position = "right") +
xlab("[1 - Q] Non-photochemical quenching") +
ylab("[1 - C] Photochemical quenching")
View(info)
View(PAM_RLC)
PAM_RLC <- read_csv("PAM_R_Matt_RLC_MASTER.csv") %>%
filter(site != "13-124") %>% # REMOVE THIS ONCE PAR VALUES ARE FIXED
group_by(sampleID, replicate) %>%
mutate(PAMID = group_indices()) %>%
filter(PAMID != 109) %>% # THIS ONE HAS MISSING VALUES TOO (DAV_AH_B73_1)
filter(PAMID != 110) %>% # THIS ONE HAS ONLY TWO VALUES (DAV_AH_B73_2)
filter(PAMID != 262) %>% # THIS ONE HAS MISSING VALUES TOO (MAN_AH_161)
filter(PAMID != 263) %>% # THIS ONE HAS MISSING VALUES TOO (MAN_AH_162)
filter(PAMID != 293) %>% # THIS ONE HAS MISSING VALUES TOO (SB1_AH_15)
filter(PAMID != 296) %>% # THIS ONE HAS MISSING VALUES TOO (SB1_AH_16)
filter(PAMID != 316) %>% # THIS ONE HAS MISSING VALUES TOO (SB1_AT_18)
filter(PAMID != 317) %>% # THIS ONE HAS MISSING VALUES TOO (SB1_AT_31)
mutate(time_date = dmy(time_date),
Fm = ifelse(Fm <= F, F+1, Fm), # There should not be any Fm values < F
PAR = ifelse(PAR == 0, 0.001, PAR), # PAR values = 0 may result in infinite values during fitting
FqFm = (Fm - F)/Fm, # Quantum yield of PSII
rETR = FqFm * PAR, # Relative electron transport rate
Fo.p = first(F) / (first(FqFm) + (first(F)/Fm)), # Fo'
onemC = (Fm - F)/(Fm - Fo.p), # [1 - C]
Fv.p = Fm - Fo.p, # Fv'
onemQ = (Fv.p/Fm)/first(FqFm)) %>% # [1 - Q]
ungroup() %>%
mutate(genus_species = paste0(substr(genus, start = 1, stop = 1), "_", species)) # Create a Genus_species column
PAM_FqFM <- read_csv("PAM_R_Matt_13123_Aten_Size.csv") %>%
mutate(time_date = dmy(time_date),
genus_species = paste0(substr(genus, start = 1, stop = 1), "_", species),
tank = as.factor(tank),
colonyID = as.factor(colonyID),
replicate = as.factor(replicate),
Fm = ifelse(Fm <= F, F+1, Fm), # There should not be any Fm values < F
FvFm = (Fm - F)/Fm) # Quantum yield of PSII
PAM_RLC %>%
group_by(sampleID, replicate) %>%
count(PAR)
PAM_RLC %>%
count(PAR)
# Define the Hennige et al 2008 equation
Hennige <- function(FqFmmax, Ek, x) {
model <- ((FqFmmax*Ek)*(1-exp(-x/Ek)))/x
return(model)
}
# Libraries for plotting and being tidy
library(broom)
library(purrr)
library(lubridate)
library(dplyr)
library(ggplot2)
library(ggpubr)
library(tidyr)
library(readr)
theme_set(theme_bw())
# Libraries for fitting curves
library(nls.multstart)
library(nlstools)
# Libraries for statistics
library(rstatix)
PAM_RLC <- read_csv("PAM_R_Matt_RLC_MASTER.csv") %>%
filter(site != "13-124") %>% # REMOVE THIS ONCE PAR VALUES ARE FIXED - but be careful because PAMIDs below will change
group_by(sampleID, replicate) %>%
mutate(PAMID = group_indices()) %>%
filter(PAMID != 109) %>% # THIS ONE HAS MISSING VALUES TOO (DAV_AH_B73_1)
filter(PAMID != 110) %>% # THIS ONE HAS ONLY TWO VALUES (DAV_AH_B73_2)
filter(PAMID != 262) %>% # THIS ONE HAS MISSING VALUES TOO (MAN_AH_161)
filter(PAMID != 263) %>% # THIS ONE HAS MISSING VALUES TOO (MAN_AH_162)
filter(PAMID != 293) %>% # THIS ONE HAS MISSING VALUES TOO (SB1_AH_15)
filter(PAMID != 296) %>% # THIS ONE HAS MISSING VALUES TOO (SB1_AH_16)
filter(PAMID != 316) %>% # THIS ONE HAS MISSING VALUES TOO (SB1_AT_18)
filter(PAMID != 317) %>% # THIS ONE HAS MISSING VALUES TOO (SB1_AT_31)
mutate(time_date = dmy(time_date),
Fm = ifelse(Fm <= F, F+1, Fm), # There should not be any Fm values < F
PAR = ifelse(PAR == 0, 0.001, PAR), # PAR values = 0 may result in infinite values during fitting
FqFm = (Fm - F)/Fm, # Quantum yield of PSII
rETR = FqFm * PAR, # Relative electron transport rate
Fo.p = first(F) / (first(FqFm) + (first(F)/Fm)), # Fo'
onemC = (Fm - F)/(Fm - Fo.p), # [1 - C]
Fv.p = Fm - Fo.p, # Fv'
onemQ = (Fv.p/Fm)/first(FqFm)) %>% # [1 - Q]
ungroup() %>%
mutate(genus_species = paste0(substr(genus, start = 1, stop = 1), "_", species)) # Create a Genus_species column
PAM_FqFM <- read_csv("PAM_R_Matt_13123_Aten_Size.csv") %>%
mutate(time_date = dmy(time_date),
genus_species = paste0(substr(genus, start = 1, stop = 1), "_", species),
tank = as.factor(tank),
colonyID = as.factor(colonyID),
replicate = as.factor(replicate),
Fm = ifelse(Fm <= F, F+1, Fm), # There should not be any Fm values < F
FvFm = (Fm - F)/Fm) # Quantum yield of PSII
# Define the Hennige et al 2008 equation
Hennige <- function(FqFmmax, Ek, x) {
model <- ((FqFmmax*Ek)*(1-exp(-x/Ek)))/x
return(model)
}
Hennige
FqFmfits <- PAM_RLC %>%
group_by(PAMID, sampleID, replicate, treatment, genus, species, genus_species, site) %>%
nest()
View(FqFmfits)
View(FqFmfits[[9]][[1]])
View(FqFmfits[[9]][[3]])
View(FqFmfits[[9]][[3]])
View(FqFmfits[[9]][[2]])
View(FqFmfits[[9]][[1]])
FqFmfits <- PAM_RLC %>%
group_by(PAMID, sampleID, replicate, treatment, genus, species, genus_species, site) %>%
nest() %>%
mutate(fit = purrr::map(data, ~ nls_multstart(FqFm ~ Hennige(FqFmmax, Ek, x = PAR),
data = .x,
iter = 250,
start_lower = c(FqFmmax = 0.2, Ek = 5),
start_upper = c(FqFmmax = 0.85, Ek = 1000),
supp_errors = 'Y',
convergence_count = 100,
na.action = na.omit,
lower = c(FqFmmax = 0.1, Ek = 5)))) %>%
ungroup()
View(FqFmfits[[10]][[1]])
# Fitting info
info <- FqFmfits %>%
mutate(summary = map(fit, glance)) %>%
unnest(summary)
View(info)
# Parameters
params <- FqFmfits %>%
mutate(., p = map(fit, tidy)) %>%
unnest(p)
View(params)
# Fitting info
info <- FqFmfits %>%
mutate(summary = map(fit, glance)) %>%
unnest(summary)
# SANITY CHECK - ALL RESIDUALS SHOULD BE = 7, IF NOT - MISSING DATA.
# RESULTS
info %>%
select(PAMID, sampleID, replicate, treatment, genus, species, genus_species, site, sigma:df.residual) %>%
arrange(sampleID, replicate) %>%
write_csv("RESULTS_FqFm_model_fit_quality.csv")
# Parameters
params <- FqFmfits %>%
mutate(., p = map(fit, tidy)) %>%
unnest(p)
# Confidence intervals
CI <- FqFmfits %>%
mutate(., cis = map(fit, confint2),
cis = map(cis, data.frame)) %>%
unnest(cis) %>%
rename(., conf.low = X2.5.., conf.high = X97.5..) %>%
group_by(., PAMID) %>%
mutate(., term = c('FqFmmax', 'Ek')) %>%
ungroup() %>%
select(., -data, -fit)
# Join parameters and confidence intervals
params_CIs <- left_join(params, CI)
# RESULTS
params_CIs %>%
ungroup() %>%
select(PAMID, sampleID, replicate, treatment, genus, species, genus_species, site,  term:conf.high) %>%
arrange(sampleID, replicate) %>%
write_csv("RESULTS_FqFm_model_parameter_estimates.csv")
# Create long PAR list
new_preds <- PAM_RLC %>%
do(., data.frame(PAR = seq(min(.$PAR), max(.$PAR), length.out = 1000), stringsAsFactors = FALSE))
# Augment predictions from fits
predictions <- FqFmfits %>%
mutate(., p = map(fit, augment, newdata = new_preds)) %>%
unnest(p) %>%
rename(., FqFm = .fitted) %>%
group_by(PAMID) %>%
mutate(prediction_id = group_indices())
# Visualise all fits with Ek
ggplot() +
geom_vline(aes(xintercept = estimate), params_CIs %>% filter(term == "Ek")) +
geom_rect(aes(xmin = conf.low, xmax = conf.high, ymin = 0, ymax = Inf), fill = "red", alpha = 0.5, params_CIs %>% filter(term == "Ek")) +
geom_line(aes(PAR, FqFm, group = prediction_id), col = "black", alpha = 0.5, predictions) +
geom_point(aes(PAR, FqFm, fill = genus_species), size = 2, shape = 21, alpha = 0.8, PAM_RLC) +
facet_wrap(~site*genus_species, ncol = 10) +
#scale_x_continuous(trans = 'log10') +
scale_y_continuous(expand = c(0, 0)) +
theme(legend.position = "right", aspect.ratio = 1) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
guides(fill = guide_legend(override.aes = list(size = 3, shape = c(21)))) +
ggtitle("Fq/Fm versus PAR with model fit ((FqFmmax*Ek)*(1-exp(-x/Ek)))/x") +
labs(x = expression(paste("PAR (", mu,"mol photons m"^-2*" s"^-1*")")),
y = 'Fq/Fm (dimensionless)')
params_CIs %>%
filter(term == "Ek") %>%
ggplot(aes(genus_species, y = estimate)) +
geom_boxplot(aes(fill = genus_species)) +
facet_wrap(~site, nrow = 1) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1), aspect.ratio = 1) +
ylab("Ek (minimum saturating irradiance)") +
xlab("Samples")
params_CIs %>%
filter(term == "FqFmmax") %>%
ggplot(aes(genus_species, y = estimate)) +
geom_boxplot(aes(fill = genus_species)) +
facet_wrap(~site, nrow = 1) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1), aspect.ratio = 1) +
ylab("FqFmmax (model predicted max quantum yield PSII)") +
xlab("Samples")
PAM_RLC %>%
group_by(genus_species, site, PAR) %>%
summarise(onemQ = mean(onemQ),
onemC = mean(onemC)) %>%
ggplot(aes(onemQ, onemC, group = genus_species)) +
geom_path() +
geom_point(aes(fill = PAR, shape = genus_species), size = 3) +
geom_abline(slope = 1) +
facet_wrap(~site, nrow = 1) +
scale_fill_viridis_c(option = "magma") +
scale_shape_manual(values = c(21, 22, 23, 24, 25, 26)) +
theme(aspect.ratio = 1, legend.position = "right") +
xlab("[1 - Q] Non-photochemical quenching") +
ylab("[1 - C] Photochemical quenching")
give.n <- function(x){
return(c(y = mean(x), label = length(x)))
}
PAM_FqFM %>%
group_by(sampleID, colonyID, size, treatment, collectiondepth) %>%
summarise(FvFm = mean(FvFm)) %>%
ggplot(aes(treatment, FvFm)) +
geom_boxplot(aes(fill = treatment)) +
facet_wrap(~size, nrow = 1) +
stat_summary(fun.data = give.n, geom = "text") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1), aspect.ratio = 1) +
scale_fill_manual(values = c("lightblue", "lightcoral")) +
ylab("FvFm") +
xlab("Treatment")
PAM_FqFM %>%
group_by(sampleID, colonyID, size, treatment, collectiondepth) %>%
summarise(FvFm = mean(FvFm)) %>%
ggplot(aes(collectiondepth, FvFm)) +
facet_wrap(~treatment * size, nrow = 1) +
geom_point(size = 3) +
geom_smooth(method = "lm") +
stat_cor( aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~")), label.y = 0.75) +
theme(aspect.ratio = 1)
